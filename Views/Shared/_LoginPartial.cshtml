@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
    <!--
        Daniel Hinbest
        NETD 3202 - Communication Activity 5
        December 13, 2020
        This new version now includes sign-in functionality with the Identity Framework

        This ASP.NET Core application is designed to allow the user to enter the information for a curling game, including the teams and the scores, and also provides functionality for editing, and deleting results.
        This page allows the user to view the details for an individual record.
        The template for this application is the same template provided for Web Development - Intermediate (WEBD 3201).
     -->
    <ul class="navbar-nav">
        <!-- If a user is signed in, the name is shown -->
        @if (SignInManager.IsSignedIn(User))
        {
            <li class="nav-item">
                <a class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity.Name!</a>
            </li>
            <li class="nav-item">
                <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                    <button type="submit" class="nav-link btn btn-link">Logout</button>
                </form>
            </li>
        }
        else
        {<!--If nobody is signed in, the login and register links are displayed-->
            <li class="nav-item">
                <a class="nav-link" asp-area="Identity" asp-page="/Account/Register">Register</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" asp-area="Identity" asp-page="/Account/Login">Login</a>
            </li>
        }
    </ul>
